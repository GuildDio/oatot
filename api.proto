syntax = "proto2";

package oatot;

import "google/protobuf/timestamp.proto";

message SiteAuth {
  required string btc_address = 1;
  required string session_id = 2;
}

message OaAuth {
 required string cl_guid = 1;
}

message SiteLoginStep1Request {
  required string btc_address = 1;
}

message SiteLoginStep1Response {
  required string challenge = 1;
}

message SiteLoginStep2Request {
  required string btc_address = 1;
  required string challenge = 2;
  required string signed_text = 3;
  required string signature = 4;
}

message SiteLoginStep2Response {
  required string session_id = 2;
}

message SiteLogoutRequest {
  required SiteAuth site_auth = 1;
}

message SiteLogoutResponse {
}

message OaLoginStep1Request {
  required string cl_guid = 1;
}

message OaLoginStep1Response {
  required string token = 1;
}

message SiteOaLoginStep2Request {
  required SiteAuth site_auth = 1;
  required string token = 2;
}

message SiteOaLoginStep2Response {
}

message SiteMyClGuidsRequest {
  required SiteAuth site_auth = 1;
}

message SiteMyClGuidsResponse {
  message ClGuid {
    required string cl_guid = 1;
    required google.protobuf.Timestamp added_time = 2;
    required google.protobuf.Timestamp last_used_time = 3;
  }

  repeated ClGuid cl_guids = 1;
}

message SiteRemoveClGuidRequest {
  required SiteAuth site_auth = 1;
  required string cl_guid = 2;
}

message SiteRemoveClGuidResponse {
}

message SiteDepositBtcRequest {
  required SiteAuth site_auth = 1;
}

message SiteDepositBtcResponse {
  required string btc_address = 1;
}

message SiteWithdrawBtcRequest {
  required SiteAuth site_auth = 1;
  required string btc_address = 2;
  required fixed64 satoshis = 3;
}

message SiteWithdrawBtcResponse {
  required string tx = 1;
}

message OaDiscardBetRequest {
  required OaAuth oa_auth = 1;
  // Unique bet ID.
  required fixed64 bet_id = 2;
}

message OaDiscardBetResponse {
}

message OaTransferMoneyRequest {
  // TODO: make server-wide, one RPC for all players.
  required OaAuth oa_auth = 1;
  // prize
  required fixed64 amount = 2;
  required string currency = 3;
}

message OaTransferMoneyResponse {
}

message OaActiveBetsSumsRequest {
  required string horse = 1;
}

message OaActiveBetsSumsResponse {
  // TODO: one RPC for all horses.
  required fixed64 oac_amount = 1;
  required fixed64 btc_amount = 2;
}

enum GameStage {
  FORMING_TEAMS = 0;
  MAKING_BETS = 1;
  PLAYING = 2;
}

message OaChangeGameStageRequest {
  required GameStage new_stage = 1;
}

message OaChangeGameStageResponse {
}

message OaIsNewRequest {
  required OaAuth oa_auth = 1;
}

message OaIsNewResponse {
  required bool result = 1;
}

message OaRegisterRequest {
  required OaAuth oa_auth = 1;
}

message OaRegisterResponse {
}

message OaMyBalanceRequest {
  required OaAuth oa_auth = 1;
  required string currency = 2;
}

message OaMyBalanceResponse {
  required fixed64 free_money = 1;
  required fixed64 money_on_bets = 2;
}

message Bet {
  // Filled by the user who makes the bet.
  required string horse = 1;
  required string currency = 2;
  required fixed64 amount = 3;
  // Filled by the system.
  optional google.protobuf.Timestamp open_time = 4;
  optional google.protobuf.Timestamp close_time = 5;
  optional string winner = 6;
  optional fixed64 prize = 7;
  // Unique bet ID.
  optional fixed64 bet_id = 8;
}

message OaMyBetRequest {
  required OaAuth oa_auth = 1;
  required Bet bet = 2;
}

message OaMyBetResponse {
}

message OaCloseBetsRequest {
  required string winner = 1;
}

message OaCloseBetsResponse {
}

message OaCloseBetsByIncidentRequest {
}

message OaCloseBetsByIncidentResponse {
}

message OaMyActiveBetsRequest {
  required OaAuth oa_auth = 1;
}

message OaMyActiveBetsResponse {
  repeated Bet bets = 1;
}

message OaMyPastBetsRequest {
  required OaAuth oa_auth = 1;
  // 15 bets per page.
  // If page string is empty (""), return last 15 bets.
  required string page = 2;
}

message OaMyPastBetsResponse {
  repeated Bet bets = 1;
  required string next_page = 2; // If empty, stop.
}

message CurrencySummary {
  required fixed64 total_bet = 1;
  required fixed64 total_prize = 2;
  required fixed64 total_lost = 3;
  required fixed64 bets_won = 4;
  required fixed64 bets_lost = 5;
}

message OaMyBetsSummaryRequest {
  required OaAuth oa_auth = 1;
}

message OaMyBetsSummaryResponse {
  // TODO: currency name as a string to support more in future.
  // Only past bets.
  required CurrencySummary oac_summary = 1;
  required CurrencySummary btc_summary = 2;
}

service Oatot {

  rpc SiteLoginStep1(SiteLoginStep1Request) returns (SiteLoginStep1Response);

  rpc SiteLoginStep2(SiteLoginStep2Request) returns (SiteLoginStep2Response);

  rpc SiteLogout(SiteLogoutRequest) returns (SiteLogoutResponse);

  // Isn't currently used, for BTC only.
  rpc OaLoginStep1(OaLoginStep1Request) returns (OaLoginStep1Response);

  rpc SiteOaLoginStep2(SiteOaLoginStep2Request) returns (SiteOaLoginStep2Response);

  rpc SiteMyClGuids(SiteMyClGuidsRequest) returns (SiteMyClGuidsResponse);

  rpc SiteRemoveClGuid(SiteRemoveClGuidRequest) returns (SiteRemoveClGuidResponse);

  rpc SiteDepositBtc(SiteDepositBtcRequest) returns (SiteDepositBtcResponse);

  rpc SiteWithdrawBtc(SiteWithdrawBtcRequest) returns (SiteWithdrawBtcResponse);

  //////////////////
  // Server-wide. //
  //////////////////

  // Change game stage (FORMING_TEAMS, MAKING_BETS, PLAYING).
  rpc OaChangeGameStage(OaChangeGameStageRequest) returns (OaChangeGameStageResponse);

  // For all the players, after the match is finished in an appropriate way.
  // We know the winner.
  rpc OaCloseBets(OaCloseBetsRequest) returns (OaCloseBetsResponse);

  // For all the players, in case match is finished by incident (e.g. someone disconnects).
  // We have to return all the money back.
  rpc OaCloseBetsByIncident(OaCloseBetsByIncidentRequest) returns (OaCloseBetsByIncidentResponse);

  //////////////////////////////
  // Initiated by the server. //
  //////////////////////////////

  // Check if this player hasn't appeared before.
  rpc OaIsNew(OaIsNewRequest) returns (OaIsNewResponse);

  // Register player in the database, sponsor them with the amount of money specified
  // by backend option.
  rpc OaRegister(OaRegisterRequest) returns (OaRegisterResponse);

  // Transfer 'prize' money calculated by player score after the end of match.
  rpc OaTransferMoney(OaTransferMoneyRequest) returns (OaTransferMoneyResponse);

  // Active bets sums by horse.
  rpc OaActiveBetsSums(OaActiveBetsSumsRequest) returns (OaActiveBetsSumsResponse);

  //////////////////////////////
  // Initiated by the client. //
  //////////////////////////////

  rpc OaMyBalance(OaMyBalanceRequest) returns (OaMyBalanceResponse);

  rpc OaMyBet(OaMyBetRequest) returns (OaMyBetResponse);

  // Discard a bet. This MUST only be possible during MAKING_BETS game stage.
  // Completely remove it and disregard in OaActiveBetsSums, OaMyActiveBets,
  // OaMyPastBets, ...
  rpc OaDiscardBet(OaDiscardBetRequest) returns (OaDiscardBetResponse);

  // Active bets for this match. Output array MUST BE sorted by open time increase.
  // (first opened bet ALWAYS 0, second - 1... etc).
  rpc OaMyActiveBets(OaMyActiveBetsRequest) returns (OaMyActiveBetsResponse);

  // Past bets (15 per page), DO NOT include active bets here.
  rpc OaMyPastBets(OaMyPastBetsRequest) returns (OaMyPastBetsResponse);

  rpc OaMyBetsSummary(OaMyBetsSummaryRequest) returns (OaMyBetsSummaryResponse);
}
