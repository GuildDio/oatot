syntax = "proto3";

package oatot;

import "google/protobuf/timestamp.proto";

message SiteAuth {
  string btc_address = 1;
  string session_id = 2;
}

message OaAuth {
  string cl_guid = 1;
}

message SiteLoginStep1Request {
  string btc_address = 1;
}

message SiteLoginStep1Response {
  string challenge = 1;
}

message SiteLoginStep2Request {
  string btc_address = 1;
  string challenge = 2;
  string signed_text = 3;
  string signature = 4;
}

message SiteLoginStep2Response {
  string session_id = 2;
}

message SiteLogoutRequest {
  SiteAuth site_auth = 1;
}

message SiteLogoutResponse {
}

message OaLoginStep1Request {
  string cl_guid = 1;
}

message OaLoginStep1Response {
  string token = 1;
}

message SiteOaLoginStep2Request {
  SiteAuth site_auth = 1;
  string token = 2;
}

message SiteOaLoginStep2Response {
}

message SiteMyClGuidsRequest {
  SiteAuth site_auth = 1;
}

message ClGuid {
  string cl_guid = 1;
  google.protobuf.Timestamp added_time = 2;
  google.protobuf.Timestamp last_used_time = 3;
}

message SiteMyClGuidsResponse {
  repeated ClGuid cl_guids = 1;
}

message SiteRemoveClGuidRequest {
  SiteAuth site_auth = 1;
  string cl_guid = 2;
}

message SiteRemoveClGuidResponse {
}

message SiteDepositBtcRequest {
  SiteAuth site_auth = 1;
}

message SiteDepositBtcResponse {
  string btc_address = 1;
}

message SiteWithdrawBtcRequest {
  SiteAuth site_auth = 1;
  string btc_address = 2;
  fixed64 satoshis = 3;
}

message SiteWithdrawBtcResponse {
  string tx = 1;
}

message OaDiscardBetRequest {
  OaAuth oa_auth = 1;
  // bet number [0, N), where N - number of active bets for the given client.
  // id increments over time (first opended bet ALWAYS 0, second - 1... etc)
  fixed64 bet_id = 2;
}

message OaDiscardBetResponse {
}

message OaTransferMoneyRequest {
  OaAuth oa_auth = 1;
  fixed64 amount = 2; // prize
}

message OaTransferMoneyResponse {
}

message OaActiveBidsSumsRequest {
  string horse = 1;
}

message OaActiveBidsSumsResponse {
  fixed64 oac_amount = 1;
  fixed64 btc_amount = 2;
}

message OaChangeGameStageRequest {
  // 0 for FORMING_TEAMS, 1 for MAKING_BETS, 2 for PLAYING
  fixed64 new_stage = 1;
}

message OaChangeGameStageResponse {
}

message OaIsNewRequest {
  OaAuth oa_auth = 1;
}

message OaIsNewResponse {
  bool result = 1;
}

message OaRegisterRequest {
  OaAuth oa_auth = 1;
}

message OaRegisterResponse {
}

message OaMyBalanceRequest {
  OaAuth oa_auth = 1;
  string currency = 2;
}

message OaMyBalanceResponse {
  fixed64 free_money = 1;
  fixed64 money_on_bids = 2;
}

message Bid {
  // Filled by the user who makes the bid.
  string horse = 1;
  string currency = 2;
  fixed64 amount = 3;
  // Filled by the system.
  google.protobuf.Timestamp open_time = 4;
  google.protobuf.Timestamp close_time = 5;
  string winner = 6;
  fixed64 prize = 7;
}

message OaMyBidRequest {
  OaAuth oa_auth = 1;
  Bid bid = 2;
}

message OaMyBidResponse {
}

message OaCloseBidsRequest {
  string winner = 1;
}

message OaCloseBidsResponse {
}

message OaCloseBidsByIncidentRequest {
}

message OaCloseBidsByIncidentResponse {
}

message OaMyActiveBidsRequest {
  OaAuth oa_auth = 1;
}

message OaMyActiveBidsResponse {
  repeated Bid bids = 1;
}

message OaMyPastBidsRequest {
  OaAuth oa_auth = 1;
  // page index (<= 0), 15 bids per page.
  fixed64 page_number = 2;
}

message OaMyPastBidsResponse {
  repeated Bid bids = 1;
}

message CurrencySummary {
  fixed64 total_bet = 1;
  fixed64 total_prize = 2;
  fixed64 total_lost = 3;
  fixed64 bets_won = 4;
  fixed64 bets_lost = 5;
}

message OaMyBidsSummaryRequest {
  OaAuth oa_auth = 1;
}

message OaMyBidsSummaryResponse {
  CurrencySummary oac_summary = 1;
  CurrencySummary btc_summary = 2;
}

service Oatot {

  rpc SiteLoginStep1(SiteLoginStep1Request) returns (SiteLoginStep1Response);

  rpc SiteLoginStep2(SiteLoginStep2Request) returns (SiteLoginStep2Response);

  rpc SiteLogout(SiteLogoutRequest) returns (SiteLogoutResponse);

  // Isn't currently used, for BTC only.
  rpc OaLoginStep1(OaLoginStep1Request) returns (OaLoginStep1Response);

  rpc SiteOaLoginStep2(SiteOaLoginStep2Request) returns (SiteOaLoginStep2Response);

  rpc SiteMyClGuids(SiteMyClGuidsRequest) returns (SiteMyClGuidsResponse);

  rpc SiteRemoveClGuid(SiteRemoveClGuidRequest) returns (SiteRemoveClGuidResponse);

  rpc SiteDepositBtc(SiteDepositBtcRequest) returns (SiteDepositBtcResponse);

  rpc SiteWithdrawBtc(SiteWithdrawBtcRequest) returns (SiteWithdrawBtcResponse);

  // Discard a bet. This MUST only be possible during MAKING_BETS game stage.
  // Completely remove it and disregard in OaActiveBidsSums, OaMyActiveBids,
  // OaMyPastBids, ...
  rpc OaDiscardBet(OaDiscardBetRequest) returns (OaDiscardBetResponse);

  // Transfer 'prize' money calculated by player score after the end of match.
  rpc OaTransferMoney(OaTransferMoneyRequest) returns (OaTransferMoneyResponse);

  // Active bids sums by horse.
  rpc OaActiveBidsSums(OaActiveBidsSumsRequest) returns (OaActiveBidsSumsResponse);

  // Change game stage (FORMING_TEAMS, MAKING_BETS, PLAYING).
  rpc OaChangeGameStage(OaChangeGameStageRequest) returns (OaChangeGameStageResponse);

  // Check if this player hasn't appeared before.
  rpc OaIsNew(OaIsNewRequest) returns (OaIsNewResponse);

  // Register player in the database, sponsor him/her with 1000 OAC.
  rpc OaRegister(OaRegisterRequest) returns (OaRegisterResponse);

  // OaMy* - operations with the given client.
  rpc OaMyBalance(OaMyBalanceRequest) returns (OaMyBalanceResponse);

  rpc OaMyBid(OaMyBidRequest) returns (OaMyBidResponse);

  // For all the players, after the match is finished in an appropriate way.
  // We know the winner.
  rpc OaCloseBids(OaCloseBidsRequest) returns (OaCloseBidsResponse);

  // For all the players, in case match is finished by incident (e.g. someone disconnects).
  // We have to return all the money back.
  rpc OaCloseBidsByIncident(OaCloseBidsByIncidentRequest) returns (OaCloseBidsByIncidentResponse);

  // Active bids for this match. Output array MUST BE sorted by open time increase.
  // (first opened bet ALWAYS 0, second - 1... etc).
  rpc OaMyActiveBids(OaMyActiveBidsRequest) returns (OaMyActiveBidsResponse);

  // Past bids (15 per page), DO NOT include active bids here.
  rpc OaMyPastBids(OaMyPastBidsRequest) returns (OaMyPastBidsResponse);

  rpc OaMyBidsSummary(OaMyBidsSummaryRequest) returns (OaMyBidsSummaryResponse);

}
